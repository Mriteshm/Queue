import java.util.*;

public class StackUse {

	private static Scanner s = new Scanner(System.in);

	public static void main(String[] args) {
		Stack stack = new Stack();

		int q = s.nextInt();

		while (q > 0) {
			int choice, input;
			choice = s.nextInt();

			switch(choice) {
				case 1:
					input = s.nextInt();
					stack.push(input);
					break;

				case 2:
					System.out.println(stack.pop());
					break;

				case 3:
					System.out.println(stack.top());
					break;

				case 4:
					System.out.println(stack.getSize());
					break; 

				default: 
					System.out.println((stack.isEmpty()) ? "true" : "false");
			}

			q -= 1;
		}

	}
public class Stack {

   private Queue<Integer>queue1;
   private Queue<Integer> queue2;

    public Stack() {

        this.queue1 = new LinkedList<Integer>();
        this.queue2 = new LinkedList<Integer>();
    }

    public void push(int item) {

        if (queue1.isEmpty()) {

            queue1.add(item);

            while (!queue2.isEmpty()) {

                queue1.add(queue2.remove());
            }
        } else {

            queue2.add(item);

            while (!queue1.isEmpty()) {

                queue2.add(queue1.remove());
            }
        }
    }
       public int top()
        {
          if(queue1.isEmpty()&&queue2.isEmpty())
          {
              return -1;
          }
          else if(queue2.isEmpty())
          return queue1.peek();
          else
          return queue2.peek();
       }

    public int pop() {

        if (queue1.isEmpty() && queue2.isEmpty()) {

            return -1;
        }

        if (!queue1.isEmpty()) {

            return queue1.remove();
        } else {

            return queue2.remove();
        }
    }

    public int getSize() {

        return queue1.size() + queue2.size();
    }

    public boolean isEmpty() {

        return queue1.isEmpty() && queue2.isEmpty();
    }

}
