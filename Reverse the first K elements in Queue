import java.util.Scanner;
import java.util.LinkedList;
import java.util.Queue;

class Input 
{
	int n;
	int k;
	Queue<Integer> queue;

	public Input(int n, int k, Queue<Integer> queue) 
    {
		this.queue = queue;
		this.n = n;
		this.k = k;
	}

}

public class Runner 
{


    public static Input takeInput() 
    {
        Scanner sr = new Scanner(System.in);

    	int n = sr.nextInt();
    	int k = sr.nextInt();

    	Queue<Integer> queue = new LinkedList<>();

    	for (int i = 0; i < n; i++) 
        {
            int val = sr.nextInt();
    		queue.add(val);
    	}

    	return new Input(n, k, queue);

    }

    public static void main(String[] args) 
    {
    	Input input = takeInput();

    	int n = input.n;
    	int k = input.k;
    	Queue<Integer> queue = input.queue;

    	queue = Solution.reverseKElements(queue, k);

    	while (!queue.isEmpty()) 
        {
    		System.out.print(queue.poll() + " ");
    	}
    }
  
	public static Queue<Integer> reverseKElements(Queue<Integer> input, int k) {
		// Your code goes here
		if (input.size() > k) {
			k = k % input.size();
		}
		if (k == 0 || k == 1) {
			return input;
		}

		reverseQueue(input, k);

		for (int i = 0; i < input.size() - k; i++) {
			input.add(input.remove());
		}

		return input;

	}

	public static void reverseQueue(Queue<Integer> input, int k) {
		// Your code goes here
		if (input.size() == 0 || input.size() == 1 || k == 0) {
			return;
		}

		int temp = input.remove();
		reverseQueue(input, k - 1);
		input.add(temp);
	}
}
